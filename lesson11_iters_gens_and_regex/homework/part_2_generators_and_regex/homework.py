"""
Задание 1: валидация номера телефона.
Требования к номеру:
1) начинается c символа + (в регулярном выражении этот символ нужно экранировать как \+)
2) после + идёт от 1 до 3 цифр
3) после идёт знак -
4) после идёт ровно 2 цифры
5) после идёт знак -
6) после идёт от 5 до 7 цифр
"""


""" Тесты для вашей регулярки (она должна быть скомпилирована!)"""
def test_valid_phone_numbers(regex_compiled):
    valid = (
        "+375-29-7776655",
        "+37-29-7776655",
        "+3-29-7776655",
        "+375-44-777665",
        "+375-44-77766",
    )
    for n in valid:
        res = regex_compiled.fullmatch(n)
        assert res.group() == n


def test_invalid_phone_numbers(regex_compiled):
    invalid = (
        "",
        "test12345test"
        "375-29-7776655",
        "+-29-7776655",
        "+3a5-29-7776655",
        "+3756-29-7776655",
        "+375--7776655",
        "+375-4-7776655",
        "+375-444-7776655",
        "+375-c4-7776655",
        "+375-33-",
        "+375-33-7",
        "+375-33-7776",
        "+375-33-77766554",
        "+375-29-7776e55",
    )

    for n2 in invalid:
        assert regex_compiled.fullmatch(n2) is None

"""
Задача 2: Преобразовать код из предыдущей домашки так, чтобы класс RandomValueIterator не использовался вообще, 
а вся логика находилась в методе __iter__ класса RandomValue, реализовать через Генератор 
"""

"""
Задача 3: Очень внимательно изучить, как работает Генератор в примере номер 3 из '2_generators.py', используя дебаггер
"""