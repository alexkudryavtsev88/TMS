"""
Функции и их аргументы
"""

"""
Функция отдельный блок кода который будет выполнен тогда и только тогда, когда функция будет явно вызвана
"""

"""
Аргументы и вызов функций
"""

"""
2. Функция может принимать N аргументов или не понимать их вообще
3. Когда мы вызываем функцию и передаём в нее параметры (значения) - эти значения мапятся (от англ. Map - Отображение) на аргументы этой функции. Если мы передали параметров меньше/больше, чем у функции аргументов, то мы получим ошибку.
4. Аргументы есть позиционные и именованные. Если мы передаём параметры в функцию без указания имён аргументов, то мы используем позиционные аргументы - то есть соответствие "параметр -> аргумент" будет в строгом порядке.
Если же мы, вызывая функцию, указываем имя аргумента перед каждым параметром - это именованные аргументы, тут уже порядок того, как мы их указали не важен. Но важно чтобы указанное имя аргумента было действительным, иначе ошибка.
5. При вызове функции с позиционными и именованными аргументами, позиционные должны быть указаны перед именованными.
6. В описании функции мы можем указать дефолтное значение аргумента - оно будет применено, если при вызове функции соответствующий параметр не был передан вовсе. 
7. Самое абстрактное описание функции - func(*args, **kwargs).
Функция с такой сигнатурой может принимать любое количество позиционных и именованных аргументов или не принимать ни одного из них.
8. Позиционные аргументы args хранятся в кортеже, именованные kwargs в дикте.
Оператор * "распаковывает" кортеж, ** распаковывает дикт.
"""

