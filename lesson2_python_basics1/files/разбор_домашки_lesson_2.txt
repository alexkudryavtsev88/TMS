ЗАДАНИЯ 1-3

1. В пункте 1 вы должны были создать три переменные, ссылающиеся на объекты которые РАВНЫ по значению и по идентификатору (адресу памяти)
в этом случае подойдут объекты ПРОСТЫХ типов, адреса в памяти (идентификаторы) таких объектов будут одинаковые

2. В пункте 2 вы должны были создать две переменные, ссылающиеся на объекты, которые РАВНЫ по значению, но НЕ РАВНЫ по идентификаторам (адресам памяти):

  x = 2
  у = str(2)
  
  - эти объекты НЕ равны ни по значению, ни по адресу памяти! Так как x это целое число, y - строка
  
  x = [1, 2, 3]
  y = (1, 2, 3)

  - эти объекты НЕ равны ни по значению, ни по адресу памяти! Так как тут список и кортеж
  
  Пример объектов, одинаковых по значению, но не одинаковых по адресу памяти:

  x, y = [1, 2, 3], [1, 2, 3]  # списки - изменяемые объекты, поэтому адреса в памяти разные
  x, y = 1, 1.0   # тут целое число и число с плавающей точкой, но ПО ЗНАЧЕНИЮ обе переменных равны. А по адресу в памяти - НЕТ.
  
3. В пункте три вы должны были поменять тип уже существующим переменным. 
   Присвоить другие объекты этим переменным явно - не совсем верно. Например:
   
   # пункт 1
   x = 1

   # пункт 3
   x = 2

  По-хорошему, в этом задании вам нужно было сделать приведение типов, с использованием встроенных функций с именем типа: int(), str(), float(), bool() и т.д.

   # пункт 1
   x = 1
   y = 1

   # пункт 3
   x = str(x)
   y = float(y)
   
   ВАЖНЫЙ МОМЕНТ!

   если у вас есть: x = '1', и вы пытаетесь привести эту переменную к целочисленному типу через функцию int() - каждый раз будет генерироваться НОВЫЙ объект типа int из вашей строки, 
   с новым адресом в памяти. То же самое для функций str, tuple и т.д. 
   Если в пункте 2 вы сделали переменные равными списками (что абсолютно правильно), то для выполнения пункта 3 эти две переменные можно привести к одному адресу памяти преобразовав списки в множества (функция set()) или привести списки к булевому значению (функция bool())
   
   - Для проверки равенства переменных по ЗНАЧЕНИЮ используйте оператор == 
   - Для проверки равенства переменных по ЗНАЧЕНИЮ и по АДРЕСУ ПАМЯТИ используйте оператор is

  Пример:

  x, y = [1, 2, 3], [1, 2, 3]
  print(x == y)  # True
  print(x is y)  # False


ЗАДАНИЕ 4:

  Правильный вариант:

  input_str = input("Введите строку: ")
  odd = input_str[::2]
  even = input_str[1::2]
  print("введенная строка:", input_str.strip(), end="\n" * 2)
  print(odd, even, sep=' ' * 5, end="\n!!!")

  

   
    
