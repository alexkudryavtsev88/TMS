1. Дана функция отправляющая http запрос, проверяющая статус ответа и возвращающая кортеж,
где 1 элемент это имя текущего треда, второй элемент - данные из ответа, преобразованные в dict

Задание:
1. Конкурентно запустить функцию 50 раз используя Тред Пулл
2. Ожидать результата выполнения всех запущенных задач 10 секунд
4. Безопасно (то есть, с обработкой возможных ошибок) извлечь результаты только завершенных задач.
   Сформировать дикт с именем results_dict, где ключи - это имена тредов, а значения по этим ключам -
   это соответствующие им дикты (все это возвращает функция send_request).
   Если результат - это какой-либо exception, то не добавляем его в дикт, а добавляем в отдельный список errors.
5. Внутри функции 2 раза зафиксиовать время выполнения кода:
   - первый раз, когда завершили ожидания выполнения задач.
   - второй раз, после того, как обработали результаты и сформировали results_dict.
   - вывести на печать эти два времени как 'exec_time_1' и 'exec_time_2'
   - проверить, что они примерно равны друг другу и что оба времени уж точно не больше 10 секунд!

Задание 2.
Сделать асинхронную версию пред задания:
- вместо тред пулла использовать asyncio и корутины (async функции)
- для запуска корутин использовать asyncio.gather и таймаут в асинхронной версии не нужен!
- Имя файла должно  быть "async_request_results.json".

(Все остальные условия аналогичны предыдущему заданию)

Задание 3.
- Убрать аргумент timeout в версии с тред пуллом.
- Закомментировать код который записывает сформированный дикт в файл (в обеих версиях)
- Запустить обе версии вашего кода несколько раз. Сравнить скорость работы каждой из версий